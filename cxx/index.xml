<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on Infinity Architect</title><link>https://cesun.info/cxx/</link><description>Recent content in C/C++ on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 29 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/cxx/index.xml" rel="self" type="application/rss+xml"/><item><title>Memo: Effective Modern C++ (Scott Meyers)</title><link>https://cesun.info/cxx/effective-modern-cxx/</link><pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/effective-modern-cxx/</guid><description>&lt;p>This is a memorandum on my walk through the Effective C++.
Most of these were written in Fall, 2020.&lt;/p></description></item><item><title>Memo: Effective C++ (Scott Meyers, 2006)</title><link>https://cesun.info/cxx/effective-cxx/</link><pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/effective-cxx/</guid><description>&lt;p>This is a memorandum on my walk through the Effective C++.
Most of these were written in Fall, 2020.
Sections that don&amp;rsquo;t hold anymore for new C++11 and later are removed.&lt;/p></description></item><item><title>MEMO: C++ Core Guidelines (CCG)</title><link>https://cesun.info/cxx/ccg/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/ccg/</guid><description>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
C.20: If you can avoid defining default operations, do. rule of zero:
Make a clear separation in mind between (1) resource-managing class, a.k.a (not precise, but) RAII class and (2) everything else (e.g. business related class) (1) should having no more public APIs other than the big 5, and optionally a raw resource getter. One seldom needs to write their own (1). STL containers and smart pointer with custom deleter should suffice.</description></item><item><title>Miscellaneous C++ consideration</title><link>https://cesun.info/cxx/misc/</link><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/misc/</guid><description>Ownership Ownership of resources is the responsibility to destroy those resources at proper time.
In any design, resource owning class should follow RAII, and follow the Single Resonsibility Principle: it shouldn&amp;rsquo;t have any public API other than
the 6 reasonable special member functions a raw resourece accessor, as described in scott&amp;rsquo;s Item 15: Provide access to raw resources in resource-managing classes. use make_(unique|shared) helpers instead of smart pointer constructor https://stackoverflow.com/a/22571331/8311608</description></item><item><title>Compiler Builtins / Intrisics</title><link>https://cesun.info/cxx/compiler-builtins/</link><pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/compiler-builtins/</guid><description>Most of these builtins translate to a single x86 instruction.
bit manipulations count leading (most significant) 0 1int __builtin_clz (unsigned int) 2int __builtin_clzl (unsigned long) 3int __builtin_clzll (unsigned long long) copy count trailing (least significant) 0 1int __builtin_ctz (unsigned int) 2int __builtin_ctzl (unsigned long) 3int __builtin_ctzll (unsigned long long) 4 5int __builtin_ffs (int x) 6int __builtin_ffsl (long) 7int __builtin_ffsll (long long) copy count occurrences of 1 1int __builtin_popcount (unsigned int x) 2int __builtin_popcountl (unsigned long) 3int __builtin_popcountll (unsigned long long) copy</description></item><item><title>Testing in C/C++</title><link>https://cesun.info/cxx/testing/</link><pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/testing/</guid><description>&lt;p>JUnit and Mockito are the de-facto standard testing suites for Java; They are used by every company I know.
On the other side, there is hardly a standardized exercise for the C/C++ world on how software should be tested.&lt;/p>
&lt;p>This article is an overview of various testing methodologies for software / library written in C/C++.&lt;/p></description></item></channel></rss>