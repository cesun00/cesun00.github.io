<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>x86 Architecture on Infinity Architect</title><link>https://cesun.info/cpu/x86/</link><description>Recent content in x86 Architecture on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/cpu/x86/index.xml" rel="self" type="application/rss+xml"/><item><title>x86 / x86-64 Instruction Format</title><link>https://cesun.info/cpu/x86/instruction-format/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/instruction-format/</guid><description>&lt;p>This article describes the format of the x86-protected mode instructions.
&lt;a href="#64-bit">Discussion of the 64-bit mode instruction format&lt;/a> will be built on the x86 one since they share a lot of structure in common.&lt;/p>
&lt;p>Extensions to x86, including AVX, and SSE instructions,
all use the same structure except that an escape prefix is used to identify the extension.&lt;/p></description></item><item><title>x86 / x86-64 Task Management</title><link>https://cesun.info/cpu/x86/task/</link><pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/task/</guid><description>The task management of x86 and x86-64 are rather symbolic. x86
task register
LTR STR Switching the CPU from executing one task to executing another can occur as the result of either an interrupt or an inter-task CALL, JMP or IRET. A hardware-recognized data structure defines each task.
GDT contains special type of descriptors known as TSS, a new register TR holds a selector to that descriptor.
The TSS format:</description></item><item><title>Overview: x86 CPU Models</title><link>https://cesun.info/cpu/x86/models/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/models/</guid><description>x86 CPU model-specific information, PIN assignment, clock, bus interface, etc.
Intel 8086 and 8088 Intel 8086 and 8088 differ only in the width of the memory data bus (thus pin assignment). 8086 has 20 address pins among which 16 are multiplexed as data pins; 8088 has also 20 address pins but only 8 are also data.
In almost every other respect the processors are identical; software written for one CPU will execute on the other without alteration.</description></item><item><title>Descriptor Tables, Descriptors, and Selectors</title><link>https://cesun.info/cpu/x86/descriptors/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/descriptors/</guid><description>Descriptor tables are memory-resident data structures understood and manipulated directly by the x86/x86-64 CPUs. Such structures are used in both x86 protected mode and AMD64 Long mode.
This article serves as a reference to descriptor tables and descriptors, without going into too much detail on how they are used to implement various features of the CPU. Please see links to feature-specific articles for such details.
Descriptor tables A descriptor table is a list of items, each known as a descriptor.</description></item><item><title>x86 Architectural and Model Registers</title><link>https://cesun.info/cpu/x86/registers/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/registers/</guid><description>bit index mnemonics name description 9 IF Interrupt-Enabled Flag These 2 flags are 14 NF Nested Task 16 RF Resume Task 8 TF Trap Flag 17 VM Virtual 8086 Mode &amp;lt;/tbody&amp;gt; General Purpose Registers In 32-bit protected mode: EAX, EBX, ECX, EDX, EBP, ESP, ESI, and EDI.
The Flags Register EFLAGS This is a 32-bit register even for the AMD64 machine.
The following bits in the flag register are updated by most arithemtic operations unless otherwise noted:</description></item><item><title>x86 Privilege Model</title><link>https://cesun.info/cpu/x86/privilege/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/privilege/</guid><description>This article introduces the privilege mode of x86, characterized by the Ring 0 - 3 division of privilege levels of task.
During the run of a task, the Current Privilege Level (CPL) of the task is given by the least significant two bits of the CS register. checking DPL in the access byte of code segment descriptor loading a new value into the CS register checking DPL in the access byte of data segment descriptor Lower ring code can&amp;rsquo;t access higher ring&amp;rsquo;s code and data.</description></item><item><title>Evolution of x86 Memory Organization</title><link>https://cesun.info/cpu/x86/memory/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/memory/</guid><description>&lt;p>This article discusses the memory organization from an x86 CPU&amp;rsquo;s perspective.&lt;/p>
&lt;p>The physical memory, for all CPU designs, can always be modeled as a flat continuous byte array.
Ultimately, the CPU talks to the memory module through the memory bus, and the physical memory - the &amp;ldquo;flat&amp;rdquo; space can be scanned through by incrementing the numeric value on the address bus. There is no magic.&lt;/p></description></item><item><title>x86 Base / Extended Instructions Review</title><link>https://cesun.info/cpu/x86/instructions/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cpu/x86/instructions/</guid><description>A quick review of x86 base instructions and extensions.
General Purpose Data Movement: MOV: transfers a byte, word, or doubleword from the source operand to the destination operand.
See also MOVSX and MOVZX
XCHG (Exchange): swaps the contents of two operands. When used with a memory operand, XCHG automatically activates the LOCK signal.
Stack Manipulation: PUSH / PUSHA POP / POPA Data Type Widening Sign extension of a narrow data type to a wider one; (extra bits of the larger item with the value of the sign bit of the smaller item)</description></item></channel></rss>