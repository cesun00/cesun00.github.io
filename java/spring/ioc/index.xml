<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Infrastructure &amp; IOC Container on Infinity Architect</title><link>https://cesun.info/java/spring/ioc/</link><description>Recent content in Spring Infrastructure &amp; IOC Container on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/java/spring/ioc/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Annotation Handling</title><link>https://cesun.info/java/spring/ioc/annotations/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/annotations/</guid><description>The whole Spring ecosystem make extensive use of Java&amp;rsquo;s annotation mechanism. This article will briefly discuss how annotations handled, and the spring framework.
Before start talking about Spring&amp;rsquo;s infrastructure of annotation handling, you may want to hear my words on the design flaw of java&amp;rsquo;s annotation, and why they sometimes brings trouble and can be slippery to beginners.
Whoever wants to associate an @Foo instance with some public class Bar {} and make the presense of @Foo available from Bar.</description></item><item><title>IOC Container Lifecycle</title><link>https://cesun.info/java/spring/ioc/lifecycle/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/lifecycle/</guid><description>We give an analysis of the lifecycle of Spring container and a summary of various lifecycle hooks of various entities in Spring.
Container Startup Startup of all ApplicationContext is divided into 3 steps:
construction of the implementation instance collecting BeanDefinitions construct non-lazy Bean instances, by calling refresh() after which an ApplicationContext will be ready to accept getBean() requests.
We will take the AnnotationConfigApplicationContext (ACAC) implementation as an example since it&amp;rsquo;s the most commonly used.</description></item><item><title>POJO Conversion in Spring</title><link>https://cesun.info/java/spring/ioc/pojo-conversion/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/pojo-conversion/</guid><description>&lt;p>The Spring ecosystem constantly needs to convert a value object, aka. POJO, from one type to its representation in another type.
Examples are:&lt;/p>
&lt;ol>
&lt;li>Converting the value &lt;code>String&lt;/code> return from XML parser when parsing XML-based Spring bean configuration, e.g. &lt;code>&amp;lt;property value=&amp;quot;...&amp;quot;&amp;gt;&lt;/code> tag, to a field (of arbitrary Java type) in a Spring bean.&lt;/li>
&lt;li>Converting &lt;code>String&lt;/code> HTTP client request parameters, or &lt;code>byte[]&lt;/code> HTTP post body, to java object argument to &lt;code>@Controller&lt;/code>&lt;/li>
&lt;li>TODO&lt;/li>
&lt;/ol>
&lt;!-- A JavaBean object is a plain value object with getters &amp; setters properlly named, and with a default ctor. --></description></item><item><title>POJO Validation in Spring</title><link>https://cesun.info/java/spring/ioc/validation/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/validation/</guid><description>Package org.springframework.validation contains Spring&amp;rsquo;s utility for validation, plus some java bean oriented infrastructure that is widely used across the whole Spring ecosystem.
Spring native validation Users are expected to implement the org.springframework.validation.Validator interface to code the logics for validation a domain object:
1public class PersonValidator implements org.springframework.validation.Validator { 2 /** 3 * whether this Validator derivation can validate `clazz`? 4 */ 5 @Override 6 public boolean supports(Class&amp;lt;?&amp;gt; clazz) { 7 return clazz.</description></item><item><title>Spring Environment &amp; Profile Handling</title><link>https://cesun.info/java/spring/ioc/env/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/env/</guid><description>Spring Property Implementation of the Environment interface collects key-value pairs for configuration purposes from a collection of abstract class PropertySource&amp;lt;T&amp;gt; instances known to that implementation.
Springâ€™s StandardEnvironment implementation for standalone application is installed with 2 PropertySources:
JVM properties. e.g. java -Djava -Dspring.profiles.active=&amp;quot;prof&amp;quot; ... OS Envvar. e.g export spring.profiles.active=prof1 &amp;amp;&amp;amp; java ... Spring&amp;rsquo;s StandardServletEnvironment implementation for Web application further includes
A PropertySource that search over ServletConfig parameters &amp;amp; ServletContext parameters A JndiPropertySource to collect JNDI &amp;hellip; TODO Spring properties can be queried by</description></item><item><title>Spring Resources Management</title><link>https://cesun.info/java/spring/ioc/res/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/res/</guid><description>Resource - Spring&amp;rsquo;s Byte Stream Interface org.springframework.core.io.Resource is spring&amp;rsquo;s awkward abstraction of an input stream from which one can read raw bytes. It tries to abstract away the details of the input stream, e.g. where these bytes come from - could be from a HTTP/FTP connection, or from a local file, but only ends up with an interface too versatile.
Apart from various vaguely defined methods with unclear semantics, the most useful one is the getInputStream() method which allows you to open the stream and actually read bytes:</description></item><item><title>Spring IOC: Type Hierarchy</title><link>https://cesun.info/java/spring/ioc/types/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/types/</guid><description>&lt;p>This article gives overviews of various type hierarchies in the &lt;code>spring-context&lt;/code> source.&lt;/p></description></item></channel></rss>