<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Infinity Architect</title><link>https://cesun.info/java/</link><description>Recent content in Java on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 25 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Maven Usage</title><link>https://cesun.info/java/maven/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/maven/</guid><description>The design of Maven can be summarized as:
A lifecycle is an order list of phases
A phase can be invoked on the CLI by mvn &amp;lt;phase&amp;gt;, which will execute all previous phases in the same lifecycle before executing that specified phase.
Maven plugins provide goals, and goals can be bound to a phase.
To use a plugin, put &amp;lt;plugin&amp;gt; in project&amp;gt;build&amp;gt;plugins. (not project&amp;gt;build&amp;gt;pluginManagement&amp;gt;plugins!)
Executing a phase is to execute all goals bound to that phase</description></item><item><title>Mybatis Memo</title><link>https://cesun.info/java/mybatis-misc/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/mybatis-misc/</guid><description>jdbcType is not necessary in mybatis mapper The JDBC type is only required for nullable columns upon insert, update or delete. This is a JDBC requirement, not a MyBatis one. So even if you were coding JDBC directly, you&amp;rsquo;d need to specify this type – but only for nullable values.
https://stackoverflow.com/questions/18645820/is-jdbctype-necessary-in-a-mybatis-mapper
Get the AUTO_INCREMENT Generated Primary Key 希望在PK自增的表里插入一行，并拿到这个由SQL生成的自增PK，不需要插完了再查；只需要：
1&amp;lt;insert id=&amp;#34;insertSelective&amp;#34; parameterType=&amp;#34;com.haiziwang.lark.common.domain.po.task.TaskInfoPo&amp;#34; keyProperty=&amp;#34;id&amp;#34; useGeneratedKeys=&amp;#34;true&amp;#34;&amp;gt; 2 insert into task_info 3 ... 4&amp;lt;/insert&amp;gt; copy 1TaskInfoPo taskInfoPo = new TaskInfoPo(); 2//taskInfoPo.</description></item><item><title>SLF4J and Backends</title><link>https://cesun.info/java/slf4j/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/slf4j/</guid><description>SLF4j org.slf4j:slf4j-api provides APIs directly used by end user.
For each facaded logging framework, an adapter package, known as the &amp;ldquo;SLF4J binding&amp;rdquo;, is required to present on the classpath (and discovered later via SPI). If no one is found, slf4j defaults to a no-op implementation and emit a warning to stderr.
Do not place more than one binding on your (runtime) class path.
and here goes the chaos:
org.slf4j:slf4j-log4j12, maintained by slf4j, was the binding for log4j &amp;lt;= 1.</description></item><item><title>Using Apache Log4j2</title><link>https://cesun.info/java/log4j2/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/log4j2/</guid><description>The setup:
Support different Log destination: console / file / mongo / sql / message queue / &amp;hellip; Log format: raw text / CVS / MS xlsx / HTML / &amp;hellip; Log file rolling by day / max file size. Configurable log line pattern: timestamp, line number, reporting class / method, etc. Reusable configuration unit. Hierarchical LoggerConfig and &amp;ldquo;Additivity&amp;rdquo; In log4j2, the one and only hierarchical relationship exists among org.apache.logging.log4j.core.config.LoggerConfig instances, established via the private LoggerConfig parent field.</description></item></channel></rss>