<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Infinity Architect</title><link>https://cesun.info/tags/linux/</link><description>Recent content in Linux on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 25 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>GNU sed stream editor</title><link>https://cesun.info/linux/utils/sed/</link><pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/utils/sed/</guid><description>The sed program is a line-based stream editor. In the big picture, it reads a line from input, applies modification if requested by script, and print the modified line to the output, and repeats until the whole input stream is consumed.
What sed Cannot sed doesn&amp;rsquo;t support Perl regex. Only POSIX BRE and ERE are available when a pattern needs to be specified; Among others, this means non-greedy matching is not possible with sed.</description></item><item><title>Linux Datetime API</title><link>https://cesun.info/linux/datetime-api/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/datetime-api/</guid><description>&amp;ldquo;seconds/microseconds/etc. since the epoch&amp;rdquo; is approximate. See &amp;ldquo;NOTES&amp;rdquo; of man 2 time.
Types:
time_t (C99): second suseconds_t (POSIX): microseconds (10^-6 sec) struct timeval (POSIX): time_t (second) + suseconds_t (microseconds) struct timespec (C11 | POSIX): time_t (second) + long (nanosecond) struct tm (C89): for break-down time only, precision to second. The clock_*() family clockid_t: An integer type identifying a specific clock.
Each clock is said to have a precision. If a calendar time that is not a multiple of clock_settime().</description></item><item><title>Linux Randomness APIs</title><link>https://cesun.info/linux/random-api/</link><pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/random-api/</guid><description>C99 rand() and srand() Range: [0, RAND_MAX]
POSIX random() and srandom() Range: [0,2^31 - 1]
No standard specifies the distribution, though common implementations seems to be uniform. (don&amp;rsquo;t rely on that) credit.
POSIX rand48 family Uniform distribution random integer &amp;amp; float number generation.
&amp;ldquo;48&amp;rdquo; in those names indicates their nature of linear congruential algorithm with 48-bit modular arithmetic.
Such algorithms generate next random number sequence by recursively:
X_{n+1} = (a * X_n + c) % m copy The choice of (m, a, c) choice differs among implementations and papers.</description></item><item><title>Executable and Linkable Format (ELF)</title><link>https://cesun.info/linux/elf/format/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/elf/format/</guid><description>&lt;p>The &lt;em>Executable and Linkable File&lt;/em> (ELF) format is widely used by various *NIX systems, including Linux, Solaris and *BSD, as the format of object files, shared objects (equivalence of Windows&amp;rsquo; DLL) and executables. Modern Linux kernel itself is also packaged as an ELF executable before compressed as &lt;code>vmlinuz&lt;/code>.&lt;/p>
&lt;p>This article gives an overview of the ELF format.&lt;/p></description></item><item><title>Linux Control Group V2 (cgroup2)</title><link>https://cesun.info/linux/kernel/cgroupv2/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/kernel/cgroupv2/</guid><description>&lt;p>This article gives an introduction to cgroup.&lt;/p>
&lt;p>The Control Group (cgroup) is a feature of the Linux kernel that allows organizing arbitrary processes into groups such that restrictions on resources can be imposed in terms of that group by an administrator, and statistics are collected in terms of that group. Windows Desktop currently doesn&amp;rsquo;t have such a feature.&lt;/p></description></item><item><title>Weak Symbol &amp; Global Symbol Interpolation in ELF</title><link>https://cesun.info/linux/elf/symbols/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/elf/symbols/</guid><description>This article explains how the STB_WEAK value of ST_BIND how such a symbol works.
for static linked objects During the static linking stage:
multiple global (a.k.a strong) symbols of the same name during the causes a multiple definition error. a unique global symbol and one or more weak symbol(s) of the same name, the definition of the global symbol is used mroe weak symbol(s) of the same name and no global symbol, the first weak symbol definition appear in the ordered input to the linker win.</description></item><item><title>ELF Linker Script</title><link>https://cesun.info/linux/elf/ld-script/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/elf/ld-script/</guid><description>On some Linux distro the famous /usr/lib/libc.so is a plain text file:
/* GNU ld script Use the shared library, but some functions are only in the static library, so try that secondarily. */ OUTPUT_FORMAT(elf64-x86-64) GROUP ( /usr/lib/libc.so.6 /usr/lib/libc_nonshared.a AS_NEEDED ( /usr/lib/ld-linux-x86-64.so.2 ) ) copy</description></item><item><title>Boot Linux kernel without GRUB (or other bootloader)</title><link>https://cesun.info/linux/efistub/</link><pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/efistub/</guid><description>The EFISTUB feature of the Linux kernel allows a kernel to be invoked directly as an EFI application, thus eliminate the necessity of using a bootloader.
First, check that your kernel has EFISTUB enabled:
1zgrep &amp;#39;CONFIG_EFI_STUB&amp;#39; /proc/config.gz copy 1efibootmgr --create 2 --disk ... # device node e.g. /dev/sdX 3 --part ... # partition number 4 --label ... # Entry Nickname 5 --loader &amp;#39;/vmlinuz-linux&amp;#39; # the executable path under the given partition 6 --unicode # interpret the following string in UCS-2 as argument to the EFI application, in our case, the kernel 7 &amp;#39;root=UUID=01a40dd8-28f0-4636-be1e-aeed60c98095 resume=UUID=2d877d5d-4ca1-4d46-a3d6-b6ee94cbbd78 rw rootflags=subvol=@ loglevel=3 quiet initrd=\initramfs-linux-lts.</description></item><item><title>On the Build System of Linux Kernel</title><link>https://cesun.info/linux/kernel/build/</link><pubDate>Wed, 06 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/kernel/build/</guid><description>&lt;p>This article analyzes the building process of the Linux kernel, including the implementation of &lt;code>Makefile&lt;/code>s. Various build-time generated files and build techniques are discussed.&lt;/p>
&lt;p>It is well-known that the Linux kernel should be built by &lt;code>make *config&lt;/code> followed by a &lt;code>make&lt;/code> call without a goal.
The &lt;code>make *config&lt;/code> command does nothing more than invoke a wizard program, which may include compiling that wizard program first.
It&amp;rsquo;s the wizard program&amp;rsquo;s responsibility to properly generate a &lt;code>.config&lt;/code> file which holds the user&amp;rsquo;s choice on the kernel building configs.&lt;/p></description></item><item><title>Linux eBPF Subsystem</title><link>https://cesun.info/linux/kernel/ebpf/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/kernel/ebpf/</guid><description>The DIGITAL UNIX Packet Filter The Digital Equipment Corporation (DEC), founded in 1957 and defuncted in 1998, once owned 2 Unix variants, Ultrix (based on BSD) and Tru64 Unix (based on OSF/1). Tru64 Unix is also known as the &amp;ldquo;Digital Unix&amp;rdquo; (digital from DEC&amp;rsquo;s name). Tru64 was then purchased by Compaq and finally the HP company.
Tru64 Unix provided a network packet filtering mechanics known as The DIGITAL UNIX Packet Filter, aka.</description></item><item><title>QEMU (Quick Emulator)</title><link>https://cesun.info/linux/qemu/</link><pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/qemu/</guid><description>administrative qemu-img: qemu-keymap: qemu-storage-daemon: qemu-pr-helper: Persistent Reservation helper program for QEMU qemu-nbd: QEMU Disk Network Block Device Utility qemu-io: QEMU Disk exerciser qemu-edid: This is a test tool for the qemu edid generator. Linux CPU emulator (compiled for * emulation) qemu-aarch64 qemu-microblaze qemu-m68k qemu-riscv32 qemu-aarch64_be qemu-microblazeel qemu-riscv64 qemu-alpha qemu-mips qemu-s390x qemu-arm qemu-mips64 qemu-sh4 qemu-armeb qemu-mips64el qemu-sh4eb qemu-cris qemu-mipsel qemu-sparc qemu-mipsn32 qemu-sparc32plus qemu-hexagon qemu-mipsn32el qemu-sparc64 qemu-hppa qemu-i386 qemu-nios2 qemu-or1k qemu-x86_64 qemu-ppc qemu-xtensa qemu-ppc64 qemu-xtensaeb qemu-loongarch64 qemu-ppc64le qemu-system emulators qemu-system-m68k qemu-system-sh4 qemu-system-i386 qemu-system-rx qemu-system-loongarch64 qemu-system-s390x qemu-system-microblaze qemu-system-sh4eb qemu-system-microblazeel qemu-system-sparc qemu-system-mips qemu-system-sparc64 qemu-system-mips64 qemu-system-tricore qemu-system-mips64el qemu-system-x86_64 qemu-system-mipsel qemu-system-xtensa qemu-system-aarch64 qemu-system-nios2 qemu-system-xtensaeb qemu-system-alpha qemu-system-or1k qemu-system-arm qemu-system-ppc qemu-system-avr qemu-system-ppc64 qemu-system-cris qemu-system-riscv32 qemu-system-hppa qemu-system-riscv64 man pages # ls qemu* -hl -rw-r--r-- 1 root root 62K Mar 28 04:34 qemu.</description></item><item><title>GNU awk record TODO</title><link>https://cesun.info/linux/utils/awk/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/utils/awk/</guid><description>awk is a record-based CLI text editor. It first splits a text file into delimiter-separated segments known as records, then performs an action if a record matches a given pattern. It is generally considered a superior replacement for sed, but with its own extra complexity. gawk is GNU&amp;rsquo;s implementation of awk. On most Linux distros is a symlink to gawk:
# $ ls -hl `which awk` lrwxrwxrwx 1 root root 4 Nov 4 2023 /usr/bin/awk -&amp;gt; gawk copy CLI invocation TODO</description></item><item><title>Retrospection: The Linux Libc</title><link>https://cesun.info/linux/linux-libc/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/linux-libc/</guid><description>https://web.archive.org/web/20040411191201/http://people.redhat.com/~sopwith/old/glibc-vs-libc5.html https://www.maketecheasier.com/history-of-early-linux-distros/ https://lwn.net/Articles/417647/ POSIX.1 was defined by the IEEE Std 1003.1-1988 specification released in 1988. The Linux kernel was written in 1991. The GNU project was already famous at that time: GCC was first released in March 1987, and
The kernel team needed a userspace C runtime as wrapper for system calls as well as providing various non-kernel utilities. GNU&amp;rsquo;s glibc 0.1 was released already.
Many claim that the Linux libc was a fork of from glibc v1.</description></item><item><title>Makefile as a Dependency Description Language</title><link>https://cesun.info/cxx/make/dependency/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/make/dependency/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/make/manual/html_node/Double_002dColon.html">https://www.gnu.org/software/make/manual/html_node/Double_002dColon.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html">https://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>Makefile&lt;/code> language can be divided into 2 parts, a dependency description language,
and a scripting language including constructs like functions, variables, loops, branching etc.&lt;/p>
&lt;p>This article discusses everything about the Dependency Description ability of a Makefile.
See &lt;a href="#TODO">TODO&lt;/a> for the scripting part.&lt;/p></description></item><item><title>GCC MISC</title><link>https://cesun.info/cxx/gcc/misc/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/gcc/misc/</guid><description>cc1 and cc1plus The output of gcc -v actually shows no invocation of the cpp preprocessor. Instead, cc1/cc1plus is invoked for both pre-processing and compilation of C/C++. My assumption is that those 2 programs fork-exec cpp.
GCC Developer Options -print-search-dirs
-print-sysroot
-print-prog-name
1gcc -print-prog-name=cc1 2/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/cc1 copy Specs String The gcc executable is a driver program, invoking other executables, e.g. cc1, as and collect2 (a wrapper around ld) to do the real job.</description></item><item><title>Linux keyboard input</title><link>https://cesun.info/linux/key-input/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/key-input/</guid><description>This article explain how keyboard events are emits from hardware and delivered to userspace applications.
Overview Keyboard hareware sends scancode to kernel. Kernel translates scancode to keycode. keyboard layout defines the mapping from (keycode, modifiers...) tuple to keysym, which is either a printable character, or an action to carry out (e.g. volumn up /down/reboot). character set (or charset) assigns each keysym symbol a specific number. key composition: in some language, typing 2 keys on the keyboard should produce a single accented letter.</description></item></channel></rss>