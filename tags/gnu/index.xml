<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GNU on Infinity Architect</title><link>https://cesun.info/tags/gnu/</link><description>Recent content in GNU on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 17 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/tags/gnu/index.xml" rel="self" type="application/rss+xml"/><item><title>GNU sed stream editor</title><link>https://cesun.info/linux/utils/sed/</link><pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/utils/sed/</guid><description>The sed program is a line-based stream editor. In the big picture, it reads a line from input, applies modification if requested by script, and print the modified line to the output, and repeats until the whole input stream is consumed.
What sed Cannot sed doesn&amp;rsquo;t support Perl regex. Only POSIX BRE and ERE are available when a pattern needs to be specified; Among others, this means non-greedy matching is not possible with sed.</description></item><item><title>Make - Performance Consideration</title><link>https://cesun.info/cxx/make/performance/</link><pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/make/performance/</guid><description>prevent useless rules from getting into the intermediate form 1 2# figure out when it&amp;#39;s necessary to active certain rule 3# and guard heavy rules with the variable 4 5ifdef may-sync-config 6 7# a heavy rule that depends on more than 1500 files 8# unconditionally have this rule will cause make to `stat` each dependency files 9heavy_rule: foo bar ... 10 11# or put in an separate file for clarity 12include include/config/auto.</description></item><item><title>GNU awk record TODO</title><link>https://cesun.info/linux/utils/awk/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/linux/utils/awk/</guid><description>awk is a record-based CLI text editor. It first splits a text file into delimiter-separated segments known as records, then performs an action if a record matches a given pattern. It is generally considered a superior replacement for sed, but with its own extra complexity. gawk is GNU&amp;rsquo;s implementation of awk. On most Linux distros is a symlink to gawk:
# $ ls -hl `which awk` lrwxrwxrwx 1 root root 4 Nov 4 2023 /usr/bin/awk -&amp;gt; gawk copy CLI invocation TODO</description></item><item><title>Makefile as a Dependency Description Language</title><link>https://cesun.info/cxx/make/dependency/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/make/dependency/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/make/manual/html_node/Double_002dColon.html">https://www.gnu.org/software/make/manual/html_node/Double_002dColon.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html">https://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>Makefile&lt;/code> language can be divided into 2 parts, a dependency description language,
and a scripting language including constructs like functions, variables, loops, branching etc.&lt;/p>
&lt;p>This article discusses everything about the Dependency Description ability of a Makefile.
See &lt;a href="#TODO">TODO&lt;/a> for the scripting part.&lt;/p></description></item><item><title>Makefile Variables</title><link>https://cesun.info/cxx/make/variables/</link><pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/make/variables/</guid><description>Define variables the lazy flavor: recursively expanded variable The good old syntax are supported by all ancient make programs.
syntax: foo = RHS
Lazy expansion: foo stored RHS verbatim, without caring what it even is. foo expands to RHS upon request, and if RHS further contains variable reference, it will be recursively expanded. e.g. The following prints hello upon make. Notice the text order of variables:
1foo = $(bar) # foo stores literal string &amp;#39;$(bar)&amp;#39; 2bar = $(ugh) # bar stores literal string &amp;#39;$(ugh)&amp;#39; 3ugh = hello 4 5# recursive expansion happens when evaluating $(foo) 6all: 7	@echo $(foo) # &amp;#39;hello&amp;#39; copy the greedy flavor: simply expanded variables Require modern make implementations.</description></item><item><title>Makefile Overview</title><link>https://cesun.info/cxx/make/overview/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/cxx/make/overview/</guid><description>The Makefile language can be divided into 2 parts, a dependency description language, and a scripting language including constructs like functions, variables, loops, branching etc.
The purpose of the scripting part of a Makefile is to
determine the value of variables at run time, which can be expanded in the dependency part. conditionally enable or disable certain rules in the dependency part The mixture of 2 languages in the same Makefile renders it a rather weird creature for beginners.</description></item></channel></rss>