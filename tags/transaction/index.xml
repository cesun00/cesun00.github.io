<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Transaction on Infinity Architect</title><link>https://cesun.info/tags/transaction/</link><description>Recent content in Transaction on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 20 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/tags/transaction/index.xml" rel="self" type="application/rss+xml"/><item><title>Stop Using @Transactional</title><link>https://cesun.info/java/spring/against-transactional/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/against-transactional/</guid><description>&lt;p>3 reasons why &lt;code>@Transactional&lt;/code> should be avoided in your production code.&lt;/p></description></item><item><title>MySQL Transaction</title><link>https://cesun.info/db/mysql/tx/</link><pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/db/mysql/tx/</guid><description>Locking Locking is heavily used in any database system to ensure ACID.
MyISAM only supports locking at table level, i.e. readers-writer lock on each entire table. No other level of protection are supported. Apparently, such granularity of locking is too large, and is detrimental the concurrency of transactions. Well, MyISAM doesn&amp;rsquo;t support transaction, anyway.
InnoDB supports transaction, and claim itself supports &amp;ldquo;multiple granularity locking&amp;rdquo;, meaning that both table level and row level locks are supported.</description></item></channel></rss>