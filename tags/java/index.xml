<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Infinity Architect</title><link>https://cesun.info/tags/java/</link><description>Recent content in Java on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Annotation Handling</title><link>https://cesun.info/java/spring/ioc/annotations/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/annotations/</guid><description>The whole Spring ecosystem make extensive use of Java&amp;rsquo;s annotation mechanism. This article will briefly discuss how annotations handled, and the spring framework.
Before start talking about Spring&amp;rsquo;s infrastructure of annotation handling, you may want to hear my words on the design flaw of java&amp;rsquo;s annotation, and why they sometimes brings trouble and can be slippery to beginners.
Whoever wants to associate an @Foo instance with some public class Bar {} and make the presense of @Foo available from Bar.</description></item><item><title>IOC Container Lifecycle</title><link>https://cesun.info/java/spring/ioc/lifecycle/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/lifecycle/</guid><description>We give an analysis of the lifecycle of Spring container and a summary of various lifecycle hooks of various entities in Spring.
Container Startup Startup of all ApplicationContext is divided into 3 steps:
construction of the implementation instance collecting BeanDefinitions construct non-lazy Bean instances, by calling refresh() after which an ApplicationContext will be ready to accept getBean() requests.
We will take the AnnotationConfigApplicationContext (ACAC) implementation as an example since it&amp;rsquo;s the most commonly used.</description></item><item><title>POJO Conversion in Spring</title><link>https://cesun.info/java/spring/ioc/pojo-conversion/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/pojo-conversion/</guid><description>&lt;p>The Spring ecosystem constantly needs to convert a value object, aka. POJO, from one type to its representation in another type.
Examples are:&lt;/p>
&lt;ol>
&lt;li>Converting the value &lt;code>String&lt;/code> return from XML parser when parsing XML-based Spring bean configuration, e.g. &lt;code>&amp;lt;property value=&amp;quot;...&amp;quot;&amp;gt;&lt;/code> tag, to a field (of arbitrary Java type) in a Spring bean.&lt;/li>
&lt;li>Converting &lt;code>String&lt;/code> HTTP client request parameters, or &lt;code>byte[]&lt;/code> HTTP post body, to java object argument to &lt;code>@Controller&lt;/code>&lt;/li>
&lt;li>TODO&lt;/li>
&lt;/ol>
&lt;!-- A JavaBean object is a plain value object with getters &amp; setters properlly named, and with a default ctor. --></description></item><item><title>POJO Validation in Spring</title><link>https://cesun.info/java/spring/ioc/validation/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/validation/</guid><description>Package org.springframework.validation contains Spring&amp;rsquo;s utility for validation, plus some java bean oriented infrastructure that is widely used across the whole Spring ecosystem.
Spring native validation Users are expected to implement the org.springframework.validation.Validator interface to code the logics for validation a domain object:
1public class PersonValidator implements org.springframework.validation.Validator { 2 /** 3 * whether this Validator derivation can validate `clazz`? 4 */ 5 @Override 6 public boolean supports(Class&amp;lt;?&amp;gt; clazz) { 7 return clazz.</description></item><item><title>Spring Environment &amp; Profile Handling</title><link>https://cesun.info/java/spring/ioc/env/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/env/</guid><description>Spring Property Implementation of the Environment interface collects key-value pairs for configuration purposes from a collection of abstract class PropertySource&amp;lt;T&amp;gt; instances known to that implementation.
Spring’s StandardEnvironment implementation for standalone application is installed with 2 PropertySources:
JVM properties. e.g. java -Djava -Dspring.profiles.active=&amp;quot;prof&amp;quot; ... OS Envvar. e.g export spring.profiles.active=prof1 &amp;amp;&amp;amp; java ... Spring&amp;rsquo;s StandardServletEnvironment implementation for Web application further includes
A PropertySource that search over ServletConfig parameters &amp;amp; ServletContext parameters A JndiPropertySource to collect JNDI &amp;hellip; TODO Spring properties can be queried by</description></item><item><title>Spring Resources Management</title><link>https://cesun.info/java/spring/ioc/res/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/res/</guid><description>Resource - Spring&amp;rsquo;s Byte Stream Interface org.springframework.core.io.Resource is spring&amp;rsquo;s awkward abstraction of an input stream from which one can read raw bytes. It tries to abstract away the details of the input stream, e.g. where these bytes come from - could be from a HTTP/FTP connection, or from a local file, but only ends up with an interface too versatile.
Apart from various vaguely defined methods with unclear semantics, the most useful one is the getInputStream() method which allows you to open the stream and actually read bytes:</description></item><item><title>Maven Usage</title><link>https://cesun.info/java/maven/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/maven/</guid><description>The design of Maven can be summarized as:
A lifecycle is an order list of phases
A phase can be invoked on the CLI by mvn &amp;lt;phase&amp;gt;, which will execute all previous phases in the same lifecycle before executing that specified phase.
Maven plugins provide goals, and goals can be bound to a phase.
To use a plugin, put &amp;lt;plugin&amp;gt; in project&amp;gt;build&amp;gt;plugins. (not project&amp;gt;build&amp;gt;pluginManagement&amp;gt;plugins!)
Executing a phase is to execute all goals bound to that phase</description></item><item><title>Mybatis Memo</title><link>https://cesun.info/java/mybatis-misc/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/mybatis-misc/</guid><description>jdbcType is not necessary in mybatis mapper The JDBC type is only required for nullable columns upon insert, update or delete. This is a JDBC requirement, not a MyBatis one. So even if you were coding JDBC directly, you&amp;rsquo;d need to specify this type – but only for nullable values.
https://stackoverflow.com/questions/18645820/is-jdbctype-necessary-in-a-mybatis-mapper
Get the AUTO_INCREMENT Generated Primary Key 希望在PK自增的表里插入一行，并拿到这个由SQL生成的自增PK，不需要插完了再查；只需要：
1&amp;lt;insert id=&amp;#34;insertSelective&amp;#34; parameterType=&amp;#34;com.haiziwang.lark.common.domain.po.task.TaskInfoPo&amp;#34; keyProperty=&amp;#34;id&amp;#34; useGeneratedKeys=&amp;#34;true&amp;#34;&amp;gt; 2 insert into task_info 3 ... 4&amp;lt;/insert&amp;gt; copy 1TaskInfoPo taskInfoPo = new TaskInfoPo(); 2//taskInfoPo.</description></item><item><title>SLF4J and Backends</title><link>https://cesun.info/java/slf4j/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/slf4j/</guid><description>SLF4j org.slf4j:slf4j-api provides APIs directly used by end user.
For each facaded logging framework, an adapter package, known as the &amp;ldquo;SLF4J binding&amp;rdquo;, is required to present on the classpath (and discovered later via SPI). If no one is found, slf4j defaults to a no-op implementation and emit a warning to stderr.
Do not place more than one binding on your (runtime) class path.
and here goes the chaos:
org.slf4j:slf4j-log4j12, maintained by slf4j, was the binding for log4j &amp;lt;= 1.</description></item><item><title>Using Apache Log4j2</title><link>https://cesun.info/java/log4j2/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/log4j2/</guid><description>The setup:
Support different Log destination: console / file / mongo / sql / message queue / &amp;hellip; Log format: raw text / CVS / MS xlsx / HTML / &amp;hellip; Log file rolling by day / max file size. Configurable log line pattern: timestamp, line number, reporting class / method, etc. Reusable configuration unit. Hierarchical LoggerConfig and &amp;ldquo;Additivity&amp;rdquo; In log4j2, the one and only hierarchical relationship exists among org.apache.logging.log4j.core.config.LoggerConfig instances, established via the private LoggerConfig parent field.</description></item><item><title>JDK `ExecutorService` and Thread Pool</title><link>https://cesun.info/java/jdk/concurrent/thread-pool/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/jdk/concurrent/thread-pool/</guid><description>&lt;p>Despite its being a JDK stock utility, the &lt;code>java.util.concurrent.Executor&lt;/code> hierarchy since Java 1.5 is a fairly good thread pool implementation.&lt;/p></description></item><item><title>Enum Implements Interfaces</title><link>https://cesun.info/java/lang/fancy-enum/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/lang/fancy-enum/</guid><description>&lt;p>&lt;code>enum&lt;/code> in Java is a syntax sugar of &lt;code>class ... extends Enum&amp;lt;&amp;gt;&lt;/code>.
It shouldn&amp;rsquo;t be surprising that it can thus implement interfaces.
This article discusses some less-known consequences of that.&lt;/p></description></item><item><title>Introduction to Java 9 Module</title><link>https://cesun.info/java/lang/java9-module/</link><pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/lang/java9-module/</guid><description>&lt;p>Java 9 introduced a modularization system and used it to modularize the JDK itself.
This article aims to provide all the information necessary for a Java developer to work with the module system.&lt;/p>
&lt;p>We will first pretend Java 9 is a new language where modules are the only development paradigm.
After a quick demonstration of the module workflow, we&amp;rsquo;ll discuss how module works in detail, and introducing the mechanics underneath.
Finally, we&amp;rsquo;ll take a step back to the reality and discuss how non-module legacy Java 8 codes are handled by the Java 9 toolchains.&lt;/p></description></item><item><title>Memo: Java Datetime-Related SDK</title><link>https://cesun.info/java/jdk/time/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/jdk/time/</guid><description>&lt;p>Datetime-related SDKs.&lt;/p></description></item><item><title>Nacos</title><link>https://cesun.info/java/spring/cloud/nacos/overview/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/cloud/nacos/overview/</guid><description>Nacos是一个在线字符串存储程序。为了组织这些字符串的存储，Nacos 做了以下划分：
顶级划分：namespace. 一个 namespace 包含若干个 group 次级划分：group. 一个 namespace 的一个 group 包含了若干个 data id. 一个 namespace 的一个 group 的一个 data id，唯一指代了一个字符串。可以查询其文本内容。 当存储的字符串符合某种大家熟知的结构化格式（如 java properties / XML / YAML) 时，nacos可以被当做配置中心使用；这也是nacos的通常用法。
您可以
存储一个新字符串: POST /nacos/v2/cs/config</description></item><item><title>JVM Launcher CLI Options</title><link>https://cesun.info/java/jvm/cli/</link><pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/jvm/cli/</guid><description>By the time of this writing, there is currently no JSR(https://cesun.info/java/#jsr) document (not even a JEP) that standardizes the command-line options for the java JVM launcher. This leaves the CLI interface to JVM invocation completely implementation-specific.
It is claimed that
All java command line options can be equivalently passed via the JDK_JAVA_OPTIONS env var.
OpenJDK HotSpot CLI Flags Standard Options Extra Options Advanced Options Flags prefixed by -X are extra options; Flags prefixed by -XX: are further advanced options for JVM.</description></item><item><title>JVM Classfile Format</title><link>https://cesun.info/java/jvm/classfile/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/jvm/classfile/</guid><description>&lt;p>A JVMS 21 conforming overview on the Java classfile format is given.
Readers are encouraged to explore &lt;a href="https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.1">the JVMS 21 Chapter 4&lt;/a> for additional details not covered in this article.&lt;/p></description></item><item><title>Stop Using @Transactional</title><link>https://cesun.info/java/spring/against-transactional/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/against-transactional/</guid><description>&lt;p>3 reasons why &lt;code>@Transactional&lt;/code> should be avoided in your production code.&lt;/p></description></item><item><title>Spring IOC: Type Hierarchy</title><link>https://cesun.info/java/spring/ioc/types/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/ioc/types/</guid><description>&lt;p>This article gives overviews of various type hierarchies in the &lt;code>spring-context&lt;/code> source.&lt;/p></description></item><item><title>Java Service Provider Interface (SPI)</title><link>https://cesun.info/java/lang/spi/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/lang/spi/</guid><description>&lt;p>This article introduces the Java Service Provider Interface (SPI).
SPI workflow in Java 8 and before is first discussed, followed by the improvement brought by Java 9.&lt;/p></description></item><item><title>Java Language Feature: Annotation</title><link>https://cesun.info/java/lang/annotation/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/lang/annotation/</guid><description>The annotation construct that facilitates all sorts of magic in Java.
1@Retention(RetentionPolicy.RUNTIME) 2@Target({ElementType.TYPE_USE, ElementType.METHOD}) 3public @interface Foo { 4} 5 6@Foo 7Integer getMenaing() { 8return 42; 9} copy java.lang.Integer getMenaing(); descriptor: ()Ljava/lang/Integer; flags: (0x0000) Code: stack=1, locals=1, args_size=1 0: bipush 42 2: invokestatic #7 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; 5: areturn LineNumberTable: line 7: 0 LocalVariableTable: Start Length Slot Name Signature 0 6 0 this Lcc/Main; RuntimeVisibleAnnotations: 0: #23() cc.FG RuntimeVisibleTypeAnnotations: 0: #23(): METHOD_RETURN cc.</description></item><item><title>Java Generic Typing</title><link>https://cesun.info/java/lang/generics/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/lang/generics/</guid><description>Java generics enable types (classes and interfaces) to be parameters when defining:
classes, interfaces, and methods. Essentially, generics is a mechanism to ensure type-safety at compile time, so that programmers do not need to write downcast manually. javac compiler now generate surefire downcast, after checking types are compatible, or complain if not.
Syntaxes for declaring type parameters:
interface/class: type parameters between class/interface name and superclass/superinterfaces method: type parameters between modifiers and return type 1interface I&amp;lt;T0,T1,.</description></item><item><title>Spring Boot: Use Thymeleaf without MVC</title><link>https://cesun.info/java/spring/thymeleaf-without-mvc/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/spring/thymeleaf-without-mvc/</guid><description>Recently I was working on refactoring a purchase automation system that collects order data from various data sources, performs some pipeline computation and generates a human-readable daily report to our purchase specialists. The previous code generates an XLSX file where heterogeneous information is mixed into a single sheet ponderously and presented as rows whose non-empty columns differ. It&amp;rsquo;s hard to read, and the code is hard to maintain.
Regular order statistics and various warnings are collected during the computation.</description></item></channel></rss>