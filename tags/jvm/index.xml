<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on Infinity Architect</title><link>https://cesun.info/tags/jvm/</link><description>Recent content in JVM on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 25 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM Launcher CLI Options</title><link>https://cesun.info/java/jvm/cli/</link><pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/jvm/cli/</guid><description>By the time of this writing, there is currently no JSR(https://cesun.info/java/#jsr) document (not even a JEP) that standardizes the command-line options for the java JVM launcher. This leaves the CLI interface to JVM invocation completely implementation-specific.
It is claimed that
All java command line options can be equivalently passed via the JDK_JAVA_OPTIONS env var.
OpenJDK HotSpot CLI Flags Standard Options Extra Options Advanced Options Flags prefixed by -X are extra options; Flags prefixed by -XX: are further advanced options for JVM.</description></item><item><title>JVM Classfile Format</title><link>https://cesun.info/java/jvm/classfile/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/jvm/classfile/</guid><description>&lt;p>A JVMS 21 conforming overview on the Java classfile format is given.
Readers are encouraged to explore &lt;a href="https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.1">the JVMS 21 Chapter 4&lt;/a> for additional details not covered in this article.&lt;/p></description></item><item><title>Garbage Collection</title><link>https://cesun.info/java/jvm/gc/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/jvm/gc/</guid><description>ℹ️ Warning The garbage collection mechanism is BY NO MEANS standardized. JVM vendors are free to choose any GC algorithms, to the extent of having on GC at all.
Overview The good old garbage collectors for HotSpot is &amp;ldquo;Serial Garbage Collector&amp;rdquo; and &amp;ldquo;Parallel Garbage Collector&amp;rdquo;. The latter one is default in and before Java 8, and is recommended on devices that has multiple hardware threads. Since Java 9, Hotspot switch to the &amp;ldquo;Garbage First Garbage Collector (G1GC)&amp;rdquo; as the default garbage collector.</description></item></channel></rss>