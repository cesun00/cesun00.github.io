<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis on Infinity Architect</title><link>https://cesun.info/tags/redis/</link><description>Recent content in Redis on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 25 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/tags/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis Misc</title><link>https://cesun.info/db/redis/misc/</link><pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/db/redis/misc/</guid><description>redis.conf The main config file on archlinux is /etc/redis/redis.conf. Different distros may differ.
Benchmark https://redis.io/topics/benchmarks
If command pipeling is enabled, a single Redis server instance can deliver 1 million QPS over a loopback TCP connection.
Simple Distributed Lock SETNX was historically used to implement inter-client (i.e. distributed) lock.
A client acquire the lock by SETNX lockname &amp;lt;cur_timestamp+lock timeout+1&amp;gt; (1); Lock owner client release the lock by DEL lockname; Other clients contending for the lock by also performing (1): This is natively a non-blocking tryLock() For client that&amp;rsquo;s willing to block for the lock, suspend the redis communication thread using application code.</description></item><item><title>Redis Commands</title><link>https://cesun.info/db/redis/commands/</link><pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/db/redis/commands/</guid><description>Top Level Command Remove key DEL key ...: variadic delete keys; no wildcard support
Complexity of DEL key a single key is O(M), M being the number of elements in the data structure associated with key. This means that deleting a string is O(1), but deleteing a data structure containing large number of objects (say a list of 50 million values) is slow. Given that redis is still (mainly) single-threaded epoll for now (version 6.</description></item><item><title>Redis 常见业务场景用法</title><link>https://cesun.info/db/redis/pattern/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate><guid>https://cesun.info/db/redis/pattern/</guid><description>General notice: Always set TTL, unless the key is meant to be permenant. Atomic problems arise when you need more than 1 commands to set TTL, e.g. INCR + EXPIRE. Use transaction properlly. Failure to set TTL cause a key to errorneously exist forever, known as &amp;ldquo;key leak&amp;rdquo;. 限流 / 频率控制 key 粒度通常以用户 (登录态 / IP / etc&amp;hellip;) 为单位。
Quick Facts:
race condition 非常非常 容易发生 INCR 无法同时设置 expire。多条指令需考虑原子性。 除非事务，避免使用 GET + INCR，容易招来原子性问题。 If key is unset, GET key return nil (null for Java Jedis#get).</description></item></channel></rss>