<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java Module on Infinity Architect</title><link>https://cesun.info/tags/java-module/</link><description>Recent content in Java Module on Infinity Architect</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 28 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cesun.info/tags/java-module/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Java 9 Module</title><link>https://cesun.info/java/lang/java9-module/</link><pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><guid>https://cesun.info/java/lang/java9-module/</guid><description>&lt;p>Java 9 introduced a modularization system and used it to modularize the JDK itself.
This article aims to provide all the information necessary for a Java developer to work with the module system.&lt;/p>
&lt;p>We will first pretend Java 9 is a new language where modules are the only development paradigm.
After a quick demonstration of the module workflow, we&amp;rsquo;ll discuss how module works in detail, and introducing the mechanics underneath.
Finally, we&amp;rsquo;ll take a step back to the reality and discuss how non-module legacy Java 8 codes are handled by the Java 9 toolchains.&lt;/p></description></item></channel></rss>